# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2017-02-19 11:33
from __future__ import unicode_literals

import WEIPDCRM.models.section
import WEIPDCRM.models.setting
import WEIPDCRM.models.version
import django.core.validators
from django.db import migrations, models
import re


class Migration(migrations.Migration):

    dependencies = [
        ('WEIPDCRM', '0033_setting_resources_alias'),
    ]

    operations = [
        migrations.AddField(
            model_name='version',
            name='custom_depiction',
            field=models.BooleanField(default=False, help_text='Exclude this version from Auto Depiction feature.', verbose_name='Custom Depiction'),
        ),
        migrations.AlterField(
            model_name='devicetype',
            name='descriptor',
            field=models.CharField(help_text='Example: iPhone 7 Plus', max_length=255, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')], verbose_name='Descriptor'),
        ),
        migrations.AlterField(
            model_name='osversion',
            name='build',
            field=models.CharField(help_text='Example: 14C92', max_length=255, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')], verbose_name='Build'),
        ),
        migrations.AlterField(
            model_name='release',
            name='architectures',
            field=models.CharField(blank=True, default='iphoneos-arm', help_text='To verify a repository is for the specific device you are working with APT looks in the release file for this list. You must specify all of the architectures that appear in your Packages file here. Again, we use darwin-arm for 1.1.x and iphoneos-arm for 2.x.', max_length=255, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')], verbose_name='Architectures'),
        ),
        migrations.AlterField(
            model_name='release',
            name='codename',
            field=models.CharField(blank=True, default='', help_text='In an "automatic" repository you might store multiple distributions of software for different target systems. For example: apt.saurik.com\'s main repository houses content both for desktop Debian Etch systems as well as the iPhone. This codename then describes what distribution we are currently looking for.', max_length=255, verbose_name='Codename'),
        ),
        migrations.AlterField(
            model_name='release',
            name='components',
            field=models.CharField(blank=True, default='main', help_text='Just set this to "main". This field might not be required, but who really knows? I, for certain, do not.', max_length=255, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')], verbose_name='Components'),
        ),
        migrations.AlterField(
            model_name='release',
            name='suite',
            field=models.CharField(blank=True, default='stable', help_text='Just set this to "stable". This field might not be required, but who really knows? I, for certain, do not.', max_length=255, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')], verbose_name='Suite'),
        ),
        migrations.AlterField(
            model_name='section',
            name='name',
            field=models.CharField(help_text='This is a general field that gives the package a category based on the software that it installs. You will not be able to edit its name after assigning any package under it.', max_length=255, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid'), WEIPDCRM.models.section.validator_underscore], verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='setting',
            name='resources_alias',
            field=models.CharField(default='/resources/', help_text='You can specify alias for resources path in Nginx or other HTTP servers, which is necessary for CDN speedup.', max_length=255, validators=[WEIPDCRM.models.setting.validator_basic, WEIPDCRM.models.setting.validate_alias], verbose_name='Resources Alias'),
        ),
        migrations.AlterField(
            model_name='version',
            name='architecture',
            field=models.CharField(blank=True, default='', help_text='This describes what system a package is designed for, as .deb files are used on everything from the iPhone to your desktop computer. The correct value for iPhoneOS 1.0.x/1.1.x is "darwin-arm". If you are deploying to iPhoneOS 1.2/2.x you should use "iphoneos-arm".', max_length=255, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')], verbose_name='Architecture'),
        ),
        migrations.AlterField(
            model_name='version',
            name='author_name',
            field=models.CharField(blank=True, default='', help_text='In contrast, the person who wrote the original software is called the "author". This name will be shown underneath the name of the package on the details screen. The field is in the same format as "Maintainer".', max_length=255, null=True, validators=[WEIPDCRM.models.version.validate_name], verbose_name='Author'),
        ),
        migrations.AlterField(
            model_name='version',
            name='breaks',
            field=models.TextField(blank=True, default='', help_text='Lists packages that this one breaks, for example by exposing bugs when the named packages rely on this one. The package maintenance software will not allow broken packages to be configured; generally the resolution is to upgrade the packages named in a Breaks field.', null=True, validators=[WEIPDCRM.models.version.validate_relations], verbose_name='Breaks'),
        ),
        migrations.AlterField(
            model_name='version',
            name='bugs',
            field=models.CharField(blank=True, default='', help_text='The url of the bug tracking system for this package. The current used format is bts-type://bts-address, like debbugs://bugs.debian.org.', max_length=255, null=True, validators=[WEIPDCRM.models.version.validate_bugs], verbose_name='Bugs'),
        ),
        migrations.AlterField(
            model_name='version',
            name='built_using',
            field=models.TextField(blank=True, default='', help_text="This field lists extra source packages that were used during the build of this binary package.  This is an indication to the archive maintenance software that these extra source packages must be kept whilst this binary package is maintained. This field must be a list of source package names with strict '=' version relationships.  Note that the archive maintenance software is likely to refuse to accept an upload which declares a Built-Using relationship which cannot be satisfied within the archive.", null=True, validators=[WEIPDCRM.models.version.validate_relations], verbose_name='Built-Using'),
        ),
        migrations.AlterField(
            model_name='version',
            name='conflicts',
            field=models.TextField(blank=True, default='', help_text='Lists packages that conflict with this one, for example by containing files with the same names. The package maintenance software will not allow conflicting packages to be installed at the same time. Two conflicting packages should each include a Conflicts line mentioning the other.', null=True, validators=[WEIPDCRM.models.version.validate_relations], verbose_name='Conflicts'),
        ),
        migrations.AlterField(
            model_name='version',
            name='depends',
            field=models.TextField(blank=True, default='', help_text="List of packages that are required for this package to provide a non-trivial amount of functionality. The package maintenance software will not allow a package to be installed if the packages listed in its Depends field aren't installed (at least not without using the force options).  In an installation, the postinst scripts of packages listed in Depends fields are run before those of the packages which depend on them. On the opposite, in a removal, the prerm script of a package is run before those of the packages listed in its Depends field.", null=True, validators=[WEIPDCRM.models.version.validate_relations], verbose_name='Depends'),
        ),
        migrations.AlterField(
            model_name='version',
            name='kernel_version',
            field=models.CharField(blank=True, default='', max_length=255, null=True, validators=[WEIPDCRM.models.version.validate_version], verbose_name='Kernel-Version'),
        ),
        migrations.AlterField(
            model_name='version',
            name='maintainer_name',
            field=models.CharField(blank=True, default='', help_text='It is typically the person who created the package, as opposed to the author of the software that was packaged.', max_length=255, null=True, validators=[WEIPDCRM.models.version.validate_name], verbose_name='Maintainer'),
        ),
        migrations.AlterField(
            model_name='version',
            name='package',
            field=models.CharField(help_text='This is the "identifier" of the package. This should be, entirely in lower case, a reversed hostname (much like a "bundleIdentifier" in Apple\'s Info.plist files).', max_length=255, unique=True, validators=[WEIPDCRM.models.version.validate_reversed_domain], verbose_name='Package'),
        ),
        migrations.AlterField(
            model_name='version',
            name='pre_depends',
            field=models.TextField(blank=True, default='', help_text='List of packages that must be installed and configured before this one can be installed. This is usually used in the case where this package requires another package for running its preinst script.', null=True, validators=[WEIPDCRM.models.version.validate_relations], verbose_name='Pre-Depends'),
        ),
        migrations.AlterField(
            model_name='version',
            name='provides',
            field=models.TextField(blank=True, default='', help_text='This is a list of virtual packages that this one provides. Usually this is used in the case of several packages all providing the same service. For example, sendmail and exim can serve as a mail server, so they provide a common package ("mail-transport-agent") on which other packages can depend. This will allow sendmail or exim to serve as a valid option to satisfy the dependency.  This prevents the packages that depend on a mail server from having to know the package names for all of them, and using \'|\' to separate the list.', null=True, validators=[WEIPDCRM.models.version.validate_relations], verbose_name='Provides'),
        ),
        migrations.AlterField(
            model_name='version',
            name='recommends',
            field=models.TextField(blank=True, default='', help_text='Lists packages that would be found together with this one in all but unusual installations. The package maintenance software will warn the user if they install a package without those listed in its Recommends field.', null=True, validators=[WEIPDCRM.models.version.validate_relations], verbose_name='Recommends'),
        ),
        migrations.AlterField(
            model_name='version',
            name='replaces',
            field=models.TextField(blank=True, default='', help_text='List of packages files from which this one replaces. This is used for allowing this package to overwrite the files of another package and is usually used with the Conflicts field to force removal of the other package, if this one also has the same files as the conflicted package.', null=True, validators=[WEIPDCRM.models.version.validate_relations], verbose_name='Replaces'),
        ),
        migrations.AlterField(
            model_name='version',
            name='source',
            field=models.CharField(blank=True, default='', help_text='The name of the source package that this binary package came from, if it is different than the name of the package itself. If the source version differs from the binary version, then the source-name will be followed by a source-version in parenthesis.', max_length=255, null=True, verbose_name='Source'),
        ),
        migrations.AlterField(
            model_name='version',
            name='sponsor_name',
            field=models.CharField(blank=True, default='', help_text='Finally, there might be someone who is simply providing the influence or the cash to make the package happen. This person should be listed here in the form of "Maintainer" except using a resource URI instead of an e-mail address.', max_length=255, null=True, validators=[WEIPDCRM.models.version.validate_name], verbose_name='Sponsor'),
        ),
        migrations.AlterField(
            model_name='version',
            name='subarchitecture',
            field=models.CharField(blank=True, default='', max_length=255, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')], verbose_name='Subarchitecture'),
        ),
        migrations.AlterField(
            model_name='version',
            name='suggests',
            field=models.TextField(blank=True, default='', help_text='Lists packages that are related to this one and can perhaps enhance its usefulness, but without which installing this package is perfectly reasonable.', null=True, validators=[WEIPDCRM.models.version.validate_relations], verbose_name='Suggests'),
        ),
        migrations.AlterField(
            model_name='version',
            name='version',
            field=models.CharField(default='1.0-1', help_text="A package's version indicates two separate values: the version of the software in the package, and the version of the package itself. These version numbers are separated by a hyphen.", max_length=255, validators=[WEIPDCRM.models.version.validate_version], verbose_name='Version'),
        ),
    ]
