# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2017-02-16 15:41
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('WEIPDCRM', '0023_version_priority'),
    ]

    operations = [
        migrations.AddField(
            model_name='version',
            name='breaks',
            field=models.TextField(blank=True, default='', help_text='Lists packages that this one breaks, for example by exposing bugs when the named packages rely on this one. The package maintenance software will not allow broken packages to be configured; generally the resolution is to upgrade the packages named in a Breaks field.', null=True, verbose_name='Breaks'),
        ),
        migrations.AddField(
            model_name='version',
            name='bugs',
            field=models.URLField(blank=True, help_text='The url of the bug tracking system for this package. The current used format is bts-type://bts-address, like debbugs://bugs.debian.org.', null=True, verbose_name='Bugs'),
        ),
        migrations.AddField(
            model_name='version',
            name='build_essential',
            field=models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No')], default='', help_text='This field is usually only needed when the answer is yes, and is commonly injected by the archive software.  It denotes a package that is required when building other packages.', max_length=255, null=True, verbose_name='Build Essential'),
        ),
        migrations.AddField(
            model_name='version',
            name='built_for_profiles',
            field=models.TextField(blank=True, default='', help_text='This field specifies a whitespace separated list of build profiles that this binary packages was built with.', null=True, verbose_name='Built-For-Profiles'),
        ),
        migrations.AddField(
            model_name='version',
            name='built_using',
            field=models.TextField(blank=True, default='', help_text="This field lists extra source packages that were used during the build of this binary package.  This is an indication to the archive maintenance software that these extra source packages must be kept whilst this binary package is maintained. This field must be a list of source package names with strict '=' version relationships.  Note that the archive maintenance software is likely to refuse to accept an upload which declares a Built-Using relationship which cannot be satisfied within the archive.", null=True, verbose_name='Built-Using'),
        ),
        migrations.AddField(
            model_name='version',
            name='conflicts',
            field=models.TextField(blank=True, default='', help_text='Lists packages that conflict with this one, for example by containing files with the same names. The package maintenance software will not allow conflicting packages to be installed at the same time. Two conflicting packages should each include a Conflicts line mentioning the other.', null=True, verbose_name='Conflicts'),
        ),
        migrations.AddField(
            model_name='version',
            name='depends',
            field=models.TextField(blank=True, default='', help_text="List of packages that are required for this package to provide a non-trivial amount of functionality. The package maintenance software will not allow a package to be installed if the packages listed in its Depends field aren't installed (at least not without using the force options).  In an installation, the postinst scripts of packages listed in Depends fields are run before those of the packages which depend on them. On the opposite, in a removal, the prerm script of a package is run before those of the packages listed in its Depends field.", null=True, verbose_name='Depends'),
        ),
        migrations.AddField(
            model_name='version',
            name='essential',
            field=models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No')], default='', help_text='This field is usually only needed when the answer is yes. It denotes a package that is required for proper operation of the system. Dpkg or any other installation tool will not allow an Essential package to be removed (at least not without using one of the force options).', max_length=255, null=True, verbose_name='Essential'),
        ),
        migrations.AddField(
            model_name='version',
            name='installed_size',
            field=models.BigIntegerField(default=0, help_text="The approximate total size of the package's installed files, in KiB units.", verbose_name='Installed-Size'),
        ),
        migrations.AddField(
            model_name='version',
            name='installer_menu_item',
            field=models.TextField(blank=True, default='', help_text='These fields are used by the debian-installer and are usually not needed. See /usr/share/doc/debian-installer/devel/modules.txt from the debian-installer package for more details about them.', null=True, verbose_name='Installer-Menu-Item'),
        ),
        migrations.AddField(
            model_name='version',
            name='kernel_version',
            field=models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='Kernel-Version'),
        ),
        migrations.AddField(
            model_name='version',
            name='multi_arch',
            field=models.CharField(blank=True, choices=[('no', 'No'), ('same', 'Same'), ('foreign', 'Foreign'), ('allowed', 'Allowed')], default='', help_text='This field is used to indicate how this package should behave on a multi-arch installations.<br /><ul><li>no - This value is the default when the field is omitted, in which case adding the field with an explicit no value is generally not needed.</li><li>same - This package is co-installable with itself, but it must not be used to satisfy the dependency of any package of a different architecture from itself.</li><li>foreign - This package is not co-installable with itself, but should be allowed to satisfy a non-arch-qualified dependency of a package of a different arch from itself (if a dependency has an explicit arch-qualifier then the value foreign is ignored).</li><li>allowed - This allows reverse-dependencies to indicate in their Depends field that they accept this package from a foreign architecture by qualifying the package name with :any, but has no effect otherwise.</li></ul>', max_length=255, null=True, verbose_name='Multi-Arch'),
        ),
        migrations.AddField(
            model_name='version',
            name='origin',
            field=models.CharField(blank=True, default='', help_text='The name of the distribution this package is originating from.', max_length=255, null=True, verbose_name='Origin'),
        ),
        migrations.AddField(
            model_name='version',
            name='pre_depends',
            field=models.TextField(blank=True, default='', help_text='List of packages that must be installed and configured before this one can be installed. This is usually used in the case where this package requires another package for running its preinst script.', null=True, verbose_name='Pre-Depends'),
        ),
        migrations.AddField(
            model_name='version',
            name='provides',
            field=models.TextField(blank=True, default='', help_text='This is a list of virtual packages that this one provides. Usually this is used in the case of several packages all providing the same service. For example, sendmail and exim can serve as a mail server, so they provide a common package ("mail-transport-agent") on which other packages can depend. This will allow sendmail or exim to serve as a valid option to satisfy the dependency.  This prevents the packages that depend on a mail server from having to know the package names for all of them, and using \'|\' to separate the list.', null=True, verbose_name='Provides'),
        ),
        migrations.AddField(
            model_name='version',
            name='recommends',
            field=models.TextField(blank=True, default='', help_text='Lists packages that would be found together with this one in all but unusual installations. The package maintenance software will warn the user if they install a package without those listed in its Recommends field.', null=True, verbose_name='Recommends'),
        ),
        migrations.AddField(
            model_name='version',
            name='replaces',
            field=models.TextField(blank=True, default='', help_text='List of packages files from which this one replaces. This is used for allowing this package to overwrite the files of another package and is usually used with the Conflicts field to force removal of the other package, if this one also has the same files as the conflicted package.', null=True, verbose_name='Conflicts'),
        ),
        migrations.AddField(
            model_name='version',
            name='source',
            field=models.CharField(blank=True, default='', help_text='The name of the source package that this binary package came from, if it is different than the name of the package itself. If the source version differs from the binary version, then the source-name will be followed by a source-version in parenthesis.  This can happen for example on a binary-only non-maintainer upload, or when setting a different binary version via \xabdpkg-gencontrol -v\xbb.', max_length=255, null=True, verbose_name='Source'),
        ),
        migrations.AddField(
            model_name='version',
            name='subarchitecture',
            field=models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='Subarchitecture'),
        ),
        migrations.AddField(
            model_name='version',
            name='suggests',
            field=models.TextField(blank=True, default='', help_text='Lists packages that are related to this one and can perhaps enhance its usefulness, but without which installing this package is perfectly reasonable.', null=True, verbose_name='Suggests'),
        ),
        migrations.AddField(
            model_name='version',
            name='tag',
            field=models.TextField(blank=True, help_text='List of tags describing the qualities of the package. The description and list of supported tags can be found in the debtags package.', null=True, verbose_name='Tag'),
        ),
    ]
